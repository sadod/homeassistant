[
    {
        "id": "kitchen_improved_tab",
        "type": "tab",
        "label": "Kitchen Light Automation - Improved",
        "disabled": false,
        "info": "Improved kitchen automation with better error handling, configurable settings, and enhanced logging"
    },
    {
        "id": "config_init",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Kitchen Config & Utilities",
        "func": "const KITCHEN_CONFIG = {\n    BRIGHTNESS: {\n        DAY: 220,\n        NIGHT: 80,\n        INCREMENT_PERCENT: 12,\n        MIN: 10,\n        MAX: 255,\n        DEFAULT: 220\n    },\n    TIMERS: {\n        AUTO_OFF_MINUTES: 15,\n        MANUAL_OVERRIDE_MINUTES: 45,\n        HEALTH_CHECK_MINUTES: 5\n    },\n    THRESHOLDS: {\n        LIGHT_SENSOR_LUX: 15\n    },\n    EVENTS: {\n        ON_SHORT: 1002,\n        DIM_UP_SHORT: 2002,\n        DIM_DOWN_SHORT: 3002,\n        OFF_SHORT: 4002,\n        ON_HOLD: 1001,\n        OFF_HOLD: 4001\n    }\n};\n\nconst validateBrightness = (brightness) => {\n    if (typeof brightness !== 'number' || brightness < KITCHEN_CONFIG.BRIGHTNESS.MIN || brightness > KITCHEN_CONFIG.BRIGHTNESS.MAX) {\n        return KITCHEN_CONFIG.BRIGHTNESS.DEFAULT;\n    }\n    return Math.round(brightness);\n};\n\nconst calculateBrightnessChange = (current, isIncrease) => {\n    const change = Math.round(current * (KITCHEN_CONFIG.BRIGHTNESS.INCREMENT_PERCENT / 100));\n    const minChange = 15;\n    const actualChange = Math.max(change, minChange);\n    \n    if (isIncrease) {\n        return Math.min(current + actualChange, KITCHEN_CONFIG.BRIGHTNESS.MAX);\n    } else {\n        return Math.max(current - actualChange, KITCHEN_CONFIG.BRIGHTNESS.MIN);\n    }\n};\n\nconst logEvent = (message, level = 'info') => {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] Kitchen: ${message}`;\n    \n    switch(level) {\n        case 'error': node.error(logMessage); break;\n        case 'warn': node.warn(logMessage); break;\n        default: node.log(logMessage);\n    }\n};\n\nconst validateKitchenState = () => {\n    try {\n        const brightness = flow.get('kitchenCurrentBrightness');\n        const validBrightness = validateBrightness(brightness);\n        \n        if (brightness !== validBrightness) {\n            flow.set('kitchenCurrentBrightness', validBrightness);\n            logEvent(`Brightness corrected from ${brightness} to ${validBrightness}`, 'warn');\n        }\n        \n        if (flow.get('kitchenAutomationEnabled') === undefined) {\n            flow.set('kitchenAutomationEnabled', true);\n        }\n        if (flow.get('kitchenManualOverride') === undefined) {\n            flow.set('kitchenManualOverride', false);\n        }\n        \n        return true;\n    } catch (error) {\n        logEvent(`State validation failed: ${error.message}`, 'error');\n        return false;\n    }\n};\n\nglobal.set('KITCHEN_CONFIG', KITCHEN_CONFIG);\nglobal.set('kitchenUtils', {\n    validateBrightness,\n    calculateBrightnessChange,\n    logEvent,\n    validateKitchenState\n});\n\nvalidateKitchenState();\nlogEvent('Kitchen automation initialized with improved configuration');\n\nreturn null;",
        "outputs": 0,
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "init_trigger",
        "type": "inject",
        "z": "kitchen_improved_tab",
        "name": "Initialize on Deploy",
        "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 20,
        "wires": [["config_init"]]
    },
    {
        "id": "dimmer_events",
        "type": "server-events",
        "z": "kitchen_improved_tab",
        "name": "Kitchen Dimmer Events",
        "server": "home_assistant_server",
        "version": 3,
        "exposeAsEntityConfig": "",
        "eventType": "deconz_event",
        "waitForRunning": true,
        "outputProperties": [
            {"property": "payload", "propertyType": "msg", "value": "", "valueType": "eventData"},
            {"property": "topic", "propertyType": "msg", "value": "$outputData(\"eventData\").event_type", "valueType": "jsonata"}
        ],
        "x": 150,
        "y": 140,
        "wires": [["process_dimmer_improved"]]
    },
    {
        "id": "process_dimmer_improved",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Process Dimmer Events - Improved",
        "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        utils?.logEvent('Configuration not loaded', 'error');\n        return null;\n    }\n    \n    const event = msg.payload.event;\n    const currentBrightness = utils.validateBrightness(flow.get('kitchenCurrentBrightness') || CONFIG.BRIGHTNESS.DEFAULT);\n    \n    utils.logEvent(`Processing dimmer event: ${event}`);\n    \n    switch(event) {\n        case CONFIG.EVENTS.ON_SHORT:\n            flow.set('kitchenManualOverride', true);\n            msg.payload = { service: 'light.toggle', entity_id: 'light.kitchen' };\n            utils.logEvent('Toggle light - manual override activated');\n            break;\n            \n        case CONFIG.EVENTS.DIM_UP_SHORT:\n            flow.set('kitchenManualOverride', true);\n            const newBrightUp = utils.calculateBrightnessChange(currentBrightness, true);\n            flow.set('kitchenCurrentBrightness', newBrightUp);\n            msg.payload = {\n                service: 'light.turn_on',\n                entity_id: 'light.kitchen',\n                data: { brightness: newBrightUp, transition: 1 }\n            };\n            utils.logEvent(`Brightness increased from ${currentBrightness} to ${newBrightUp}`);\n            break;\n            \n        case CONFIG.EVENTS.DIM_DOWN_SHORT:\n            flow.set('kitchenManualOverride', true);\n            const newBrightDown = utils.calculateBrightnessChange(currentBrightness, false);\n            flow.set('kitchenCurrentBrightness', newBrightDown);\n            msg.payload = {\n                service: 'light.turn_on',\n                entity_id: 'light.kitchen',\n                data: { brightness: newBrightDown, transition: 1 }\n            };\n            utils.logEvent(`Brightness decreased from ${currentBrightness} to ${newBrightDown}`);\n            break;\n            \n        case CONFIG.EVENTS.OFF_SHORT:\n            flow.set('kitchenManualOverride', true);\n            msg.payload = {\n                service: 'light.turn_off',\n                entity_id: 'light.kitchen',\n                data: { transition: 1 }\n            };\n            utils.logEvent('Light turned off - manual override activated');\n            break;\n            \n        case CONFIG.EVENTS.ON_HOLD:\n            flow.set('kitchenAutomationEnabled', false);\n            flow.set('kitchenManualOverride', true);\n            msg.payload = {\n                service: 'light.turn_on',\n                entity_id: 'light.kitchen',\n                data: { brightness: CONFIG.BRIGHTNESS.MAX, transition: 1 }\n            };\n            utils.logEvent('Automation disabled via hold gesture', 'warn');\n            break;\n            \n        case CONFIG.EVENTS.OFF_HOLD:\n            flow.set('kitchenAutomationEnabled', true);\n            flow.set('kitchenManualOverride', false);\n            msg.payload = {\n                service: 'light.turn_off',\n                entity_id: 'light.kitchen',\n                data: { transition: 1 }\n            };\n            utils.logEvent('Automation enabled via hold gesture');\n            break;\n            \n        default:\n            utils.logEvent(`Unknown dimmer event: ${event}`, 'warn');\n            return null;\n    }\n    \n    msg.timestamp = Date.now();\n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error processing dimmer event: ${error.message}`, 'error');\n    return null;\n}",
        "outputs": 1,
        "x": 420,
        "y": 140,
        "wires": [["execute_command"]]
    },
    {
        "id": "execute_command",
        "type": "api-call-service",
        "z": "kitchen_improved_tab",
        "name": "Execute Kitchen Command",
        "server": "home_assistant_server",
        "version": 7,
        "debugenabled": false,
        "domain": "",
        "service": "",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 720,
        "y": 140,
        "wires": [["override_timer"]]
    },
    {
        "id": "override_timer",
        "type": "trigger",
        "z": "kitchen_improved_tab",
        "name": "Manual Override Timer (45min)",
        "op1": "",
        "op2": "clear_override",
        "op1type": "nul",
        "op2type": "str",
        "duration": "45",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1000,
        "y": 140,
        "wires": [["clear_override_improved"]]
    },
    {
        "id": "clear_override_improved",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Clear Override - Improved",
        "func": "try {\n    const utils = global.get('kitchenUtils');\n    const automationEnabled = flow.get('kitchenAutomationEnabled') !== false;\n    \n    if (automationEnabled) {\n        flow.set('kitchenManualOverride', false);\n        utils?.logEvent('Manual override cleared after timeout');\n    } else {\n        utils?.logEvent('Manual override timeout ignored - automation disabled');\n    }\n    \n    return null;\n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error clearing override: ${error.message}`, 'error');\n    return null;\n}",
        "outputs": 1,
        "x": 1300,
        "y": 140,
        "wires": [[]]
    },
    {
        "id": "motion_sensor",
        "type": "server-state-changed",
        "z": "kitchen_improved_tab",
        "name": "Kitchen Motion Sensor",
        "server": "home_assistant_server",
        "version": 6,
        "outputs": 2,
        "entities": {
            "entity": ["binary_sensor.sensor_kitchen_motion"],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "outputOnlyOnStateChange": true,
        "for": "",
        "forType": "num",
        "x": 150,
        "y": 240,
        "wires": [["check_automation_improved"], []]
    },
    {
        "id": "check_automation_improved",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Check Automation State - Improved",
        "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    if (!utils) {\n        node.error('Kitchen utilities not available');\n        return [null, msg];\n    }\n    \n    utils.validateKitchenState();\n    \n    const automationEnabled = flow.get('kitchenAutomationEnabled') !== false;\n    const manualOverride = flow.get('kitchenManualOverride') === true;\n    \n    utils.logEvent(`Motion detected - Automation: ${automationEnabled}, Override: ${manualOverride}`);\n    \n    if (automationEnabled && !manualOverride) {\n        utils.logEvent('Motion automation proceeding');\n        return [msg, null];\n    } else {\n        const reason = !automationEnabled ? 'automation disabled' : 'manual override active';\n        utils.logEvent(`Motion automation blocked: ${reason}`, 'warn');\n        return [null, msg];\n    }\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error checking automation state: ${error.message}`, 'error');\n    return [null, msg];\n}",
        "outputs": 2,
        "x": 420,
        "y": 240,
        "wires": [["time_switch"], []]
    },
    {
        "id": "time_switch",
        "type": "time-range-switch",
        "z": "kitchen_improved_tab",
        "name": "Day/Night Switch",
        "lat": "53.8",
        "lon": "-1.44",
        "startTime": "07:00",
        "endTime": "19:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 680,
        "y": 240,
        "wires": [["light_check"], ["night_brightness"]]
    },
    {
        "id": "light_check",
        "type": "api-current-state",
        "z": "kitchen_improved_tab",
        "name": "Light Level Check",
        "server": "home_assistant_server",
        "version": 3,
        "outputs": 2,
        "halt_if": "15",
        "halt_if_type": "num",
        "halt_if_compare": "gt",
        "entity_id": "sensor.sensor_kitchen_illuminance",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 900,
        "y": 200,
        "wires": [[], ["day_brightness"]]
    },
    {
        "id": "day_brightness",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Set Day Brightness",
        "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        node.error('Configuration not available');\n        return null;\n    }\n    \n    const brightness = CONFIG.BRIGHTNESS.DAY;\n    utils.logEvent(`Setting daytime brightness: ${brightness}`);\n    \n    msg.payload = {\n        service: 'light.turn_on',\n        entity_id: 'light.kitchen',\n        data: { brightness: brightness, transition: 2 }\n    };\n    \n    msg.brightness_set = brightness;\n    msg.mode = 'daytime';\n    \n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error setting daytime brightness: ${error.message}`, 'error');\n    return null;\n}",
        "outputs": 1,
        "x": 1120,
        "y": 200,
        "wires": [["day_service_call"]]
    },
    {
        "id": "day_service_call",
        "type": "api-call-service",
        "z": "kitchen_improved_tab",
        "name": "Day Light Service",
        "server": "home_assistant_server",
        "version": 7,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": ["light.kitchen"],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1340,
        "y": 200,
        "wires": [["store_brightness"]]
    },
    {
        "id": "night_brightness",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Set Night Brightness",
        "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        node.error('Configuration not available');\n        return null;\n    }\n    \n    const brightness = CONFIG.BRIGHTNESS.NIGHT;\n    utils.logEvent(`Setting nighttime brightness: ${brightness}`);\n    \n    msg.payload = {\n        service: 'light.turn_on',\n        entity_id: 'light.kitchen',\n        data: { brightness: brightness, transition: 2 }\n    };\n    \n    msg.brightness_set = brightness;\n    msg.mode = 'nighttime';\n    \n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error setting nighttime brightness: ${error.message}`, 'error');\n    return null;\n}",
        "outputs": 1,
        "x": 900,
        "y": 280,
        "wires": [["night_service_call"]]
    },
    {
        "id": "night_service_call",
        "type": "api-call-service",
        "z": "kitchen_improved_tab",
        "name": "Night Light Service",
        "server": "home_assistant_server",
        "version": 7,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_on",
        "areaId": [],
        "deviceId": [],
        "entityId": ["light.kitchen"],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1140,
        "y": 280,
        "wires": [["store_brightness"]]
    },
    {
        "id": "store_brightness",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Store Brightness & Start Timer",
        "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    if (!utils) {\n        node.error('Kitchen utilities not available');\n        return null;\n    }\n    \n    const brightness = msg.brightness_set || msg.data?.brightness || 220;\n    const validBrightness = utils.validateBrightness(brightness);\n    \n    flow.set('kitchenCurrentBrightness', validBrightness);\n    \n    utils.logEvent(`Brightness stored: ${validBrightness} (${msg.mode || 'unknown'} mode)`);\n    \n    msg.timer_start = Date.now();\n    msg.brightness_stored = validBrightness;\n    \n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error storing brightness: ${error.message}`, 'error');\n    return null;\n}",
        "outputs": 1,
        "x": 1400,
        "y": 240,
        "wires": [["auto_off_timer"]]
    },
    {
        "id": "auto_off_timer",
        "type": "trigger",
        "z": "kitchen_improved_tab",
        "name": "Auto Off Timer (15min)",
        "op1": "",
        "op2": "auto_off",
        "op1type": "nul",
        "op2type": "str",
        "duration": "15",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1660,
        "y": 240,
        "wires": [["check_before_off"]]
    },
    {
        "id": "check_before_off",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Check Before Auto Off",
        "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    if (!utils) {\n        node.error('Kitchen utilities not available');\n        return [null, msg];\n    }\n    \n    utils.validateKitchenState();\n    \n    const manualOverride = flow.get('kitchenManualOverride') === true;\n    const automationEnabled = flow.get('kitchenAutomationEnabled') !== false;\n    \n    utils.logEvent(`Auto-off timer triggered - Automation: ${automationEnabled}, Override: ${manualOverride}`);\n    \n    if (automationEnabled && !manualOverride) {\n        utils.logEvent('Auto-off proceeding');\n        return [msg, null];\n    } else {\n        const reason = !automationEnabled ? 'automation disabled' : 'manual override active';\n        utils.logEvent(`Auto-off cancelled: ${reason}`, 'warn');\n        return [null, msg];\n    }\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error in auto-off check: ${error.message}`, 'error');\n    return [null, msg];\n}",
        "outputs": 2,
        "x": 1900,
        "y": 240,
        "wires": [["turn_off_lights"], []]
    },
    {
        "id": "turn_off_lights",
        "type": "api-call-service",
        "z": "kitchen_improved_tab",
        "name": "Turn Off Kitchen Lights",
        "server": "home_assistant_server",
        "version": 7,
        "debugenabled": false,
        "domain": "light",
        "service": "turn_off",
        "areaId": [],
        "deviceId": [],
        "entityId": ["light.kitchen"],
        "data": "{\"transition\":2}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2160,
        "y": 240,
        "wires": [["log_auto_off"]]
    },
    {
        "id": "log_auto_off",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Log Auto Off Complete",
        "func": "const utils = global.get('kitchenUtils');\nutils?.logEvent('Kitchen lights automatically turned off');\nreturn null;",
        "outputs": 0,
        "x": 2420,
        "y": 240,
        "wires": []
    },
    {
        "id": "scene_monitor",
        "type": "server-state-changed",
        "z": "kitchen_improved_tab",
        "name": "Kitchen Scene Monitor",
        "server": "home_assistant_server",
        "version": 6,
        "outputs": 1,
        "entities": {
            "entity": ["scene.kitchen_energize", "scene.kitchen_dimmed"],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "outputOnlyOnStateChange": true,
        "for": "",
        "forType": "num",
        "x": 150,
        "y": 340,
        "wires": [["handle_scene_improved"]]
    },
    {
        "id": "handle_scene_improved",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Handle Scene Activation",
        "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        node.error('Configuration not available');\n        return null;\n    }\n    \n    if (msg.payload === 'on') {\n        flow.set('kitchenManualOverride', true);\n        \n        let brightness = CONFIG.BRIGHTNESS.DEFAULT;\n        let sceneName = 'unknown';\n        \n        if (msg.topic.includes('energize')) {\n            brightness = CONFIG.BRIGHTNESS.MAX;\n            sceneName = 'energize';\n        } else if (msg.topic.includes('dimmed')) {\n            brightness = CONFIG.BRIGHTNESS.NIGHT;\n            sceneName = 'dimmed';\n        }\n        \n        flow.set('kitchenCurrentBrightness', brightness);\n        utils.logEvent(`Scene '${sceneName}' activated - brightness set to ${brightness}`);\n    }\n    \n    return null;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error handling scene: ${error.message}`, 'error');\n    return null;\n}",
        "outputs": 1,
        "x": 420,
        "y": 340,
        "wires": [[]]
    },
    {
        "id": "health_check_timer",
        "type": "inject",
        "z": "kitchen_improved_tab",
        "name": "Health Check (5min)",
        "props": [{"p": "payload"}],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "health_check",
        "payloadType": "str",
        "x": 150,
        "y": 420,
        "wires": [["health_monitor_improved"]]
    },
    {
        "id": "health_monitor_improved",
        "type": "function",
        "z": "kitchen_improved_tab",
        "name": "Health Monitor - Improved",
        "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    if (!utils) {\n        node.error('Kitchen utilities not available');\n        return null;\n    }\n    \n    // Validate current state\n    const stateValid = utils.validateKitchenState();\n    \n    if (stateValid) {\n        utils.logEvent('Health check completed - all systems normal');\n    } else {\n        utils.logEvent('Health check found issues - state corrected', 'warn');\n    }\n    \n    // Log current status\n    const automation = flow.get('kitchenAutomationEnabled') !== false;\n    const override = flow.get('kitchenManualOverride') === true;\n    const brightness = flow.get('kitchenCurrentBrightness');\n    \n    utils.logEvent(`Status - Automation: ${automation}, Override: ${override}, Brightness: ${brightness}`);\n    \n    return null;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Health check failed: ${error.message}`, 'error');\n    return null;\n}",
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [[]]
    },
    {
        "id": "home_assistant_server",
        "type": "server",
        "name": "Home Assistant",
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    }
]
