[
  {
    "id": "de98ada0e7f4dd56",
    "type": "tab",
    "label": "Kitchen Light Automation - Improved",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "config_node",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen Config & Utilities",
    "func": "// Configuration Constants\nconst KITCHEN_CONFIG = {\n    BRIGHTNESS: {\n        DAY: 220,\n        NIGHT: 80,\n        INCREMENT_PERCENT: 12,\n        MIN: 10,\n        MAX: 255,\n        DEFAULT: 220\n    },\n    TIMERS: {\n        AUTO_OFF_MINUTES: 15,\n        MANUAL_OVERRIDE_MINUTES: 45,\n        HEALTH_CHECK_MINUTES: 5\n    },\n    THRESHOLDS: {\n        LIGHT_SENSOR_LUX: 15\n    },\n    EVENTS: {\n        ON_SHORT: 1002,\n        DIM_UP_SHORT: 2002,\n        DIM_DOWN_SHORT: 3002,\n        OFF_SHORT: 4002,\n        ON_HOLD: 1001,\n        OFF_HOLD: 4001\n    }\n};\n\n// Utility Functions\nconst validateBrightness = (brightness) => {\n    if (typeof brightness !== 'number' || brightness < KITCHEN_CONFIG.BRIGHTNESS.MIN || brightness > KITCHEN_CONFIG.BRIGHTNESS.MAX) {\n        return KITCHEN_CONFIG.BRIGHTNESS.DEFAULT;\n    }\n    return Math.round(brightness);\n};\n\nconst calculateBrightnessChange = (current, isIncrease) => {\n    const change = Math.round(current * (KITCHEN_CONFIG.BRIGHTNESS.INCREMENT_PERCENT / 100));\n    const minChange = 15; // Minimum change to ensure visibility\n    const actualChange = Math.max(change, minChange);\n    \n    if (isIncrease) {\n        return Math.min(current + actualChange, KITCHEN_CONFIG.BRIGHTNESS.MAX);\n    } else {\n        return Math.max(current - actualChange, KITCHEN_CONFIG.BRIGHTNESS.MIN);\n    }\n};\n\nconst logEvent = (message, level = 'info') => {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] Kitchen Automation: ${message}`;\n    \n    switch(level) {\n        case 'error':\n            node.error(logMessage);\n            break;\n        case 'warn':\n            node.warn(logMessage);\n            break;\n        default:\n            node.log(logMessage);\n    }\n};\n\nconst validateKitchenState = () => {\n    try {\n        const brightness = flow.get('kitchenCurrentBrightness');\n        const validBrightness = validateBrightness(brightness);\n        \n        if (brightness !== validBrightness) {\n            flow.set('kitchenCurrentBrightness', validBrightness);\n            logEvent(`Brightness corrected from ${brightness} to ${validBrightness}`, 'warn');\n        }\n        \n        // Ensure boolean states are properly set\n        if (flow.get('kitchenAutomationEnabled') === undefined) {\n            flow.set('kitchenAutomationEnabled', true);\n        }\n        if (flow.get('kitchenManualOverride') === undefined) {\n            flow.set('kitchenManualOverride', false);\n        }\n        \n        return true;\n    } catch (error) {\n        logEvent(`State validation failed: ${error.message}`, 'error');\n        return false;\n    }\n};\n\n// Store config and utilities in global context for other nodes\nglobal.set('KITCHEN_CONFIG', KITCHEN_CONFIG);\nglobal.set('kitchenUtils', {\n    validateBrightness,\n    calculateBrightnessChange,\n    logEvent,\n    validateKitchenState\n});\n\n// Initialize state on startup\nvalidateKitchenState();\nlogEvent('Kitchen automation initialized with improved configuration');\n\nreturn null;",
    "outputs": 0,
    "x": 150,
    "y": 40,
    "wires": []
  },
  {
    "id": "89da5cb08717237d",
    "type": "server-events",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen Dimmer Events",
    "server": "13a86ab7.efb7d5",
    "version": 3,
    "exposeAsEntityConfig": "",
    "eventType": "deconz_event",
    "waitForRunning": true,
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "eventData"
      },
      {
        "property": "topic",
        "propertyType": "msg",
        "value": "$outputData(\"eventData\").event_type",
        "valueType": "jsonata"
      },
      {
        "property": "event_type",
        "propertyType": "msg",
        "value": "$outputData(\"eventData\").event_type",
        "valueType": "jsonata"
      }
    ],
    "x": 130,
    "y": 120,
    "wires": [
      [
        "17502c49af4fd63d"
      ]
    ]
  },
  {
    "id": "17502c49af4fd63d",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Process Kitchen Dimmer Events - Improved",
    "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        utils?.logEvent('Configuration not loaded', 'error');\n        return null;\n    }\n    \n    const event = msg.payload.event;\n    const currentBrightness = utils.validateBrightness(flow.get('kitchenCurrentBrightness') || CONFIG.BRIGHTNESS.DEFAULT);\n    \n    utils.logEvent(`Processing dimmer event: ${event}`);\n    \n    switch(event) {\n        case CONFIG.EVENTS.ON_SHORT: // ON - Short Press\n            flow.set('kitchenManualOverride', true);\n            msg.payload = {\n                service: 'light.toggle',\n                entity_id: 'light.kitchen'\n            };\n            utils.logEvent('Toggle light - manual override activated');\n            break;\n            \n        case CONFIG.EVENTS.DIM_UP_SHORT: // DIM UP - Short Press\n            flow.set('kitchenManualOverride', true);\n            const newBrightUp = utils.calculateBrightnessChange(currentBrightness, true);\n            flow.set('kitchenCurrentBrightness', newBrightUp);\n            msg.payload = {\n                service: 'light.turn_on',\n                entity_id: 'light.kitchen',\n                data: {\n                    brightness: newBrightUp,\n                    transition: 1\n                }\n            };\n            utils.logEvent(`Brightness increased from ${currentBrightness} to ${newBrightUp}`);\n            break;\n            \n        case CONFIG.EVENTS.DIM_DOWN_SHORT: // DIM DOWN - Short Press\n            flow.set('kitchenManualOverride', true);\n            const newBrightDown = utils.calculateBrightnessChange(currentBrightness, false);\n            flow.set('kitchenCurrentBrightness', newBrightDown);\n            msg.payload = {\n                service: 'light.turn_on',\n                entity_id: 'light.kitchen',\n                data: {\n                    brightness: newBrightDown,\n                    transition: 1\n                }\n            };\n            utils.logEvent(`Brightness decreased from ${currentBrightness} to ${newBrightDown}`);\n            break;\n            \n        case CONFIG.EVENTS.OFF_SHORT: // OFF - Short Press\n            flow.set('kitchenManualOverride', true);\n            msg.payload = {\n                service: 'light.turn_off',\n                entity_id: 'light.kitchen',\n                data: {\n                    transition: 1\n                }\n            };\n            utils.logEvent('Light turned off - manual override activated');\n            break;\n            \n        case CONFIG.EVENTS.ON_HOLD: // ON - Hold (Disable automation)\n            flow.set('kitchenAutomationEnabled', false);\n            flow.set('kitchenManualOverride', true);\n            msg.payload = {\n                service: 'light.turn_on',\n                entity_id: 'light.kitchen',\n                data: {\n                    brightness: CONFIG.BRIGHTNESS.MAX,\n                    transition: 1\n                }\n            };\n            utils.logEvent('Automation disabled via hold gesture', 'warn');\n            break;\n            \n        case CONFIG.EVENTS.OFF_HOLD: // OFF - Hold (Enable automation)\n            flow.set('kitchenAutomationEnabled', true);\n            flow.set('kitchenManualOverride', false);\n            msg.payload = {\n                service: 'light.turn_off',\n                entity_id: 'light.kitchen',\n                data: {\n                    transition: 1\n                }\n            };\n            utils.logEvent('Automation enabled via hold gesture');\n            break;\n            \n        default:\n            utils.logEvent(`Unknown dimmer event received: ${event}`, 'warn');\n            return null;\n    }\n    \n    // Add timestamp for tracking\n    msg.timestamp = Date.now();\n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error processing dimmer event: ${error.message}`, 'error');\n    return null;\n}",
    "outputs": 1,
    "x": 400,
    "y": 120,
    "wires": [
      [
        "c1411bfd300dd899"
      ]
    ]
  },
  {
    "id": "c1411bfd300dd899",
    "type": "api-call-service",
    "z": "de98ada0e7f4dd56",
    "name": "Execute Kitchen Command",
    "server": "13a86ab7.efb7d5",
    "version": 7,
    "debugenabled": false,
    "action": "",
    "floorId": [],
    "areaId": [],
    "deviceId": [],
    "entityId": [],
    "labelId": [],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "blockInputOverrides": false,
    "domain": "",
    "service": "",
    "x": 720,
    "y": 120,
    "wires": [
      [
        "306f32fa1a82d69a"
      ]
    ]
  },
  {
    "id": "306f32fa1a82d69a",
    "type": "trigger",
    "z": "de98ada0e7f4dd56",
    "name": "Clear Kitchen Manual Override Timer",
    "op1": "",
    "op2": "clear_override",
    "op1type": "nul",
    "op2type": "str",
    "duration": "45",
    "extend": true,
    "overrideDelay": false,
    "units": "min",
    "reset": "",
    "bytopic": "all",
    "topic": "topic",
    "outputs": 1,
    "x": 1000,
    "y": 120,
    "wires": [
      [
        "72ce64d13ef580f2"
      ]
    ]
  },
  {
    "id": "72ce64d13ef580f2",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Clear Kitchen Override Flag",
    "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    // Only clear if automation is still enabled\n    const automationEnabled = flow.get('kitchenAutomationEnabled') !== false;\n    \n    if (automationEnabled) {\n        flow.set('kitchenManualOverride', false);\n        utils?.logEvent('Manual override cleared after timeout');\n    } else {\n        utils?.logEvent('Manual override timeout ignored - automation disabled');\n    }\n    \n    return null;\n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error clearing override: ${error.message}`, 'error');\n    return null;\n}",
    "outputs": 1,
    "x": 1300,
    "y": 120,
    "wires": [
      []
    ]
  },
  {
    "id": "c377aa798512dedd",
    "type": "server-state-changed",
    "z": "de98ada0e7f4dd56",
    "name": "Motion Detected - Kitchen",
    "server": "13a86ab7.efb7d5",
    "version": 6,
    "outputs": 2,
    "exposeAsEntityConfig": "",
    "entities": {
      "entity": [
        "binary_sensor.sensor_kitchen_motion"
      ],
      "substring": [],
      "regex": []
    },
    "outputInitially": false,
    "stateType": "str",
    "ifState": "on",
    "ifStateType": "str",
    "outputOnlyOnStateChange": true,
    "for": "",
    "forType": "num",
    "ignorePrevStateNull": false,
    "ignorePrevStateUnknown": false,
    "ignorePrevStateUnavailable": false,
    "ignoreCurrentStateUnknown": false,
    "ignoreCurrentStateUnavailable": false,
    "outputProperties": [],
    "x": 150,
    "y": 240,
    "wires": [
      [
        "9d92d9e7dc2280f5"
      ],
      []
    ]
  },
  {
    "id": "9d92d9e7dc2280f5",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Check Kitchen Automation State - Improved",
    "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    if (!utils) {\n        node.error('Kitchen utilities not available');\n        return [null, msg];\n    }\n    \n    // Validate state before proceeding\n    utils.validateKitchenState();\n    \n    const automationEnabled = flow.get('kitchenAutomationEnabled') !== false;\n    const manualOverride = flow.get('kitchenManualOverride') === true;\n    \n    utils.logEvent(`Motion detected - Automation: ${automationEnabled}, Override: ${manualOverride}`);\n    \n    if (automationEnabled && !manualOverride) {\n        utils.logEvent('Motion automation proceeding');\n        return [msg, null];\n    } else {\n        const reason = !automationEnabled ? 'automation disabled' : 'manual override active';\n        utils.logEvent(`Motion automation blocked: ${reason}`, 'warn');\n        return [null, msg];\n    }\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error checking automation state: ${error.message}`, 'error');\n    return [null, msg];\n}",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 320,
    "wires": [
      [
        "5478f59aef78fc50"
      ],
      []
    ]
  },
  {
    "id": "5478f59aef78fc50",
    "type": "time-range-switch",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen: Daytime or Nighttime?",
    "lat": "53.8",
    "lon": "-1.44",
    "startTime": "07:00",
    "endTime": "19:00",
    "startOffset": 0,
    "endOffset": 0,
    "x": 570,
    "y": 220,
    "wires": [
      [
        "cc8923e634e6f8a7"
      ],
      [
        "87d596958e253a06"
      ]
    ]
  },
  {
    "id": "cc8923e634e6f8a7",
    "type": "api-current-state",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen Dark Enough?",
    "server": "13a86ab7.efb7d5",
    "version": 3,
    "outputs": 2,
    "halt_if": "15",
    "halt_if_type": "num",
    "halt_if_compare": "gt",
    "entity_id": "sensor.sensor_kitchen_illuminance",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [],
    "for": 0,
    "forType": "num",
    "forUnits": "minutes",
    "x": 920,
    "y": 180,
    "wires": [
      [],
      [
        "3dca25c400d8d243"
      ]
    ]
  },
  {
    "id": "3dca25c400d8d243",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen Daytime Brightness - Improved",
    "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        node.error('Configuration not available');\n        return null;\n    }\n    \n    const brightness = CONFIG.BRIGHTNESS.DAY;\n    utils.logEvent(`Setting daytime brightness: ${brightness}`);\n    \n    msg.payload = {\n        service: 'light.turn_on',\n        entity_id: 'light.kitchen',\n        data: {\n            brightness: brightness,\n            transition: 2\n        }\n    };\n    \n    msg.brightness_set = brightness;\n    msg.mode = 'daytime';\n    \n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error setting daytime brightness: ${error.message}`, 'error');\n    return null;\n}",
    "outputs": 1,
    "x": 1200,
    "y": 180,
    "wires": [
      [
        "service_call_day"
      ]
    ]
  },
  {
    "id": "service_call_day",
    "type": "api-call-service",
    "z": "de98ada0e7f4dd56",
    "name": "Execute Daytime Command",
    "server": "13a86ab7.efb7d5",
    "version": 7,
    "debugenabled": false,
    "action": "light.turn_on",
    "floorId": [],
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "light.kitchen"
    ],
    "labelId": [],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "blockInputOverrides": false,
    "domain": "light",
    "service": "turn_on",
    "x": 1480,
    "y": 180,
    "wires": [
      [
        "aa99fc140cdf2516"
      ]
    ]
  },
  {
    "id": "87d596958e253a06",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen Nighttime Brightness - Improved",
    "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        node.error('Configuration not available');\n        return null;\n    }\n    \n    const brightness = CONFIG.BRIGHTNESS.NIGHT;\n    utils.logEvent(`Setting nighttime brightness: ${brightness}`);\n    \n    msg.payload = {\n        service: 'light.turn_on',\n        entity_id: 'light.kitchen',\n        data: {\n            brightness: brightness,\n            transition: 2\n        }\n    };\n    \n    msg.brightness_set = brightness;\n    msg.mode = 'nighttime';\n    \n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error setting nighttime brightness: ${error.message}`, 'error');\n    return null;\n}",
    "outputs": 1,
    "x": 800,
    "y": 320,
    "wires": [
      [
        "service_call_night"
      ]
    ]
  },
  {
    "id": "service_call_night",
    "type": "api-call-service",
    "z": "de98ada0e7f4dd56",
    "name": "Execute Nighttime Command",
    "server": "13a86ab7.efb7d5",
    "version": 7,
    "debugenabled": false,
    "action": "light.turn_on",
    "floorId": [],
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "light.kitchen"
    ],
    "labelId": [],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "blockInputOverrides": false,
    "domain": "light",
    "service": "turn_on",
    "x": 1080,
    "y": 320,
    "wires": [
      [
        "aa99fc140cdf2516"
      ]
    ]
  },
  {
    "id": "aa99fc140cdf2516",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Store Kitchen Brightness & Start Timer - Improved",
    "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    if (!utils) {\n        node.error('Kitchen utilities not available');\n        return null;\n    }\n    \n    // Get brightness from the message or use default\n    const brightness = msg.brightness_set || msg.data?.brightness || 220;\n    const validBrightness = utils.validateBrightness(brightness);\n    \n    // Store the brightness level that was just set\n    flow.set('kitchenCurrentBrightness', validBrightness);\n    \n    utils.logEvent(`Brightness stored: ${validBrightness} (${msg.mode || 'unknown'} mode)`);\n    \n    // Add metadata for timer\n    msg.timer_start = Date.now();\n    msg.brightness_stored = validBrightness;\n    \n    return msg;\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error storing brightness: ${error.message}`, 'error');\n    return null;\n}",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1350,
    "y": 280,
    "wires": [
      [
        "1215b4fa942ecfe7"
      ]
    ]
  },
  {
    "id": "1215b4fa942ecfe7",
    "type": "trigger",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen Auto Off Timer (15min)",
    "op1": "",
    "op2": "auto_off",
    "op1type": "nul",
    "op2type": "str",
    "duration": "15",
    "extend": true,
    "overrideDelay": false,
    "units": "min",
    "reset": "",
    "bytopic": "all",
    "topic": "topic",
    "outputs": 1,
    "x": 1650,
    "y": 200,
    "wires": [
      [
        "31a28a95cbe1083e"
      ]
    ]
  },
  {
    "id": "31a28a95cbe1083e",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Check Before Kitchen Auto Off - Improved",
    "func": "try {\n    const utils = global.get('kitchenUtils');\n    \n    if (!utils) {\n        node.error('Kitchen utilities not available');\n        return [null, msg];\n    }\n    \n    // Validate state before proceeding\n    utils.validateKitchenState();\n    \n    const manualOverride = flow.get('kitchenManualOverride') === true;\n    const automationEnabled = flow.get('kitchenAutomationEnabled') !== false;\n    \n    utils.logEvent(`Auto-off timer triggered - Automation: ${automationEnabled}, Override: ${manualOverride}`);\n    \n    if (automationEnabled && !manualOverride) {\n        utils.logEvent('Auto-off proceeding');\n        return [msg, null];\n    } else {\n        const reason = !automationEnabled ? 'automation disabled' : 'manual override active';\n        utils.logEvent(`Auto-off cancelled: ${reason}`, 'warn');\n        return [null, msg];\n    }\n    \n} catch (error) {\n    const utils = global.get('kitchenUtils');\n    utils?.logEvent(`Error in auto-off check: ${error.message}`, 'error');\n    return [null, msg];\n}",
    "outputs": 2,
    "x": 1650,
    "y": 320,
    "wires": [
      [
        "601f054ce8c156f3"
      ],
      []
    ]
  },
  {
    "id": "601f054ce8c156f3",
    "type": "api-call-service",
    "z": "de98ada0e7f4dd56",
    "name": "Turn Off Kitchen Lights",
    "server": "13a86ab7.efb7d5",
    "version": 7,
    "debugenabled": false,
    "action": "light.turn_off",
    "floorId": [],
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "light.kitchen"
    ],
    "labelId": [],
    "data": "{\"transition\":2}",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "blockInputOverrides": false,
    "domain": "light",
    "service": "turn_off",
    "x": 1920,
    "y": 280,
    "wires": [
      [
        "auto_off_complete"
      ]
    ]
  },
  {
    "id": "auto_off_complete",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Log Auto Off Complete",
    "func": "const utils = global.get('kitchenUtils');\nutils?.logEvent('Kitchen lights automatically turned off');\nreturn null;",
    "outputs": 0,
    "x": 2150,
    "y": 280,
    "wires": []
  },
  {
    "id": "b04c0b33d2e20c82",
    "type": "server-state-changed",
    "z": "de98ada0e7f4dd56",
    "name": "Kitchen Scene State Monitor",
    "server": "13a86ab7.efb7d5",
    "version": 6,
    "outputs": 1,
    "exposeAsEntityConfig": "",
    "entities": {
      "entity": [
        "scene.kitchen_energize",
        "scene.kitchen_dimmed"
      ],
      "substring": [],
      "regex": []
    },
    "outputInitially": false,
    "stateType": "str",
    "ifState": "",
    "ifStateType": "str",
    "outputOnlyOnStateChange": true,
    "for": "",
    "forType": "num",
    "ignorePrevStateNull": false,
    "ignorePrevStateUnknown": false,
    "ignorePrevStateUnavailable": false,
    "ignoreCurrentStateUnknown": false,
    "ignoreCurrentStateUnavailable": false,
    "outputProperties": [],
    "x": 170,
    "y": 400,
    "wires": [
      [
        "734faeccb3878878"
      ]
    ]
  },
  {
    "id": "734faeccb3878878",
    "type": "function",
    "z": "de98ada0e7f4dd56",
    "name": "Handle Kitchen Scene Activation - Improved",
    "func": "try {\n    const CONFIG = global.get('KITCHEN_CONFIG');\n    const utils = global.get('kitchenUtils');\n    \n    if (!CONFIG || !utils) {\n        node.error('Configuration not available');\n        return null;\n    }\n    \n    if (msg.payload === 'on') {\n        // Scene was activated - set manual override\n        flow.set('kitchenManualOverride', true);\n        \n        let brightness = CONFIG.BRIGHTNESS.DEFAULT;\n        let sceneName = 'unknown';\n        \n        // Set brightness based on scene type\n        if (msg.topic.includes('energize')) {\n            brightness = CONFIG.BRIGHTNESS.MAX;\n            sceneName
